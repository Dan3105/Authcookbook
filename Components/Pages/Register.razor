@using AuthCookbook.Core.Services.Authentication.Registration;
@page "/register"
@rendermode InteractiveServer
@inject IRegistrationService registrationService
<PageTitle>Register - AuthCookbook</PageTitle>

<div class="auth-container">
    <div class="auth-header">
        <h2>Create Your Account</h2>
        <p>Choose how you'd like to register with AuthCookbook</p>
    </div>

    <div class="register-grid">
        <!-- Email Registration -->
        <div class="auth-card large">
            <div class="auth-card-header">
                <h3>Register with Email</h3>
                <p>Create a new account using your email address</p>
            </div>
            <form>
                <div class="auth-card-body">
                    <div class="form-group">
                        <input type="text" @bind="userInput" placeholder="Username" class="form-input" />
                    </div>
                    <div class="form-group">
                        <input type="email" @bind="email" placeholder="Email Address" class="form-input" />
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <input type="password" @bind="password" placeholder="Password" class="form-input" />
                        </div>
                        <div class="form-group">
                            <input type="password" @bind="confirmPassword" placeholder="Confirm Password" class="form-input" />
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div style="color: red; margin-bottom: 10px;">@errorMessage</div>
                    }
                    <button class="auth-btn primary large" @onclick="RegisterUser">Create Account</button>
                </div>
            </form>
        </div>
    </div>

    <div class="auth-footer">
        <p>Already have an account? <a href="/login">Sign in here</a></p>
    </div>
</div>

@code {
    // You can add code-behind logic here if needed
    string userInput = string.Empty;
    string email = string.Empty;
    string password = string.Empty;
    string confirmPassword = string.Empty;
    string errorMessage = string.Empty;

    public void RegisterUser() {
        errorMessage = string.Empty; // Clear previous errors
        
        if (string.IsNullOrWhiteSpace(userInput) || string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "All fields are required";
            return;
        }
        
        if (password != confirmPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }
        
        try
        {
            registrationService.RegisterWithPassword(userInput, email, password);
            // Optionally redirect or show success message
        }
        catch (Exception ex)
        {
            errorMessage = $"Registration failed: {ex.Message}";
        }
    }
}